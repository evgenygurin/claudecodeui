#!/usr/bin/env node

/**
 * Demo Advanced Development Tools
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fd, rg, ast-grep, jq, yq
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class DevToolsDemo {
  constructor() {
    this.projectRoot = path.join(__dirname, '..');
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  execCommand(command, options = {}) {
    try {
      const result = execSync(command, { 
        cwd: this.projectRoot,
        encoding: 'utf8',
        ...options 
      });
      return result.trim();
    } catch (error) {
      return `–û—à–∏–±–∫–∞: ${error.message}`;
    }
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è fd (–ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤)
   */
  demoFd() {
    console.log('üîç === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø FD (–ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤) ===\n');
    
    // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö TypeScript —Ñ–∞–π–ª–æ–≤
    console.log('1. –ü–æ–∏—Å–∫ –≤—Å–µ—Ö TypeScript —Ñ–∞–π–ª–æ–≤:');
    const tsFiles = this.execCommand('fd --type f --extension ts');
    console.log(tsFiles.split('\n').slice(0, 5).join('\n'));
    console.log('...\n');
    
    // –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    console.log('2. –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
    const components = this.execCommand('fd --type f --glob "*component*"');
    console.log(components.split('\n').slice(0, 5).join('\n'));
    console.log('...\n');
    
    // –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É
    console.log('3. –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>10KB):');
    const largeFiles = this.execCommand('fd --type f --size +10k');
    console.log(largeFiles.split('\n').slice(0, 3).join('\n'));
    console.log('...\n');
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è rg (–ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É)
   */
  demoRg() {
    console.log('üîç === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø RG (–ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É) ===\n');
    
    // –ü–æ–∏—Å–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ React
    console.log('1. –ü–æ–∏—Å–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ React:');
    const reactImports = this.execCommand('rg "import.*React" --type tsx --type ts');
    console.log(reactImports.split('\n').slice(0, 5).join('\n'));
    console.log('...\n');
    
    // –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–ø—Å–∞–º–∏
    console.log('2. –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–ø—Å–∞–º–∏:');
    const withProps = this.execCommand('rg "interface.*Props" --type tsx --type ts');
    console.log(withProps.split('\n').slice(0, 3).join('\n'));
    console.log('...\n');
    
    // –ü–æ–∏—Å–∫ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    console.log('3. –ü–æ–∏—Å–∫ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:');
    const todos = this.execCommand('rg "TODO|FIXME|HACK" --type tsx --type ts');
    console.log(todos.split('\n').slice(0, 3).join('\n'));
    console.log('...\n');
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è jq (—Ä–∞–±–æ—Ç–∞ —Å JSON)
   */
  demoJq() {
    console.log('üìÑ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø JQ (—Ä–∞–±–æ—Ç–∞ —Å JSON) ===\n');
    
    // –ê–Ω–∞–ª–∏–∑ package.json
    console.log('1. –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ package.json:');
    const dependencies = this.execCommand('jq ".dependencies | keys" package.json');
    console.log(dependencies);
    console.log();
    
    // –ü–æ–¥—Å—á–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.log('2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
    const depCount = this.execCommand('jq ".dependencies | length" package.json');
    console.log(`–í—Å–µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${depCount}`);
    console.log();
    
    // –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if (fs.existsSync('collected-components/components-metadata.json')) {
      console.log('3. –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
      const componentCount = this.execCommand('jq "length" collected-components/components-metadata.json');
      console.log(`–í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${componentCount}`);
      
      const categories = this.execCommand('jq "group_by(.category) | map({category: .[0].category, count: length})" collected-components/components-metadata.json');
      console.log('–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
      console.log(categories);
      console.log();
    }
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è yq (—Ä–∞–±–æ—Ç–∞ —Å YAML)
   */
  demoYq() {
    console.log('üìã === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø YQ (—Ä–∞–±–æ—Ç–∞ —Å YAML) ===\n');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π YAML —Ñ–∞–π–ª
    const testYaml = `
name: "Claude Code UI"
version: "1.0.0"
description: "Modern UI for Claude Code"
features:
  - "Component Collection"
  - "Vercel Integration"
  - "Advanced Dev Tools"
dependencies:
  react: "^18.2.0"
  next: "^14.0.0"
  typescript: "^5.0.0"
`;
    
    const yamlFile = path.join(this.projectRoot, 'test-config.yaml');
    fs.writeFileSync(yamlFile, testYaml);
    
    console.log('1. –ß—Ç–µ–Ω–∏–µ YAML —Ñ–∞–π–ª–∞:');
    const yamlContent = this.execCommand(`yq eval '.' ${yamlFile}`);
    console.log(yamlContent);
    console.log();
    
    console.log('2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏—á:');
    const features = this.execCommand(`yq eval '.features[]' ${yamlFile}`);
    console.log(features);
    console.log();
    
    console.log('3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏:');
    const version = this.execCommand(`yq eval '.version' ${yamlFile}`);
    console.log(`–í–µ—Ä—Å–∏—è: ${version}`);
    console.log();
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(yamlFile);
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ast-grep (–∞–Ω–∞–ª–∏–∑ AST)
   */
  demoAstGrep() {
    console.log('üå≥ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø AST-GREP (–∞–Ω–∞–ª–∏–∑ AST) ===\n');
    
    // –ü–æ–∏—Å–∫ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    console.log('1. –ü–æ–∏—Å–∫ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
    const reactComponents = this.execCommand('ast-grep --pattern "const $COMPONENT = () => { $$$ }" --lang tsx src/');
    console.log(reactComponents.split('\n').slice(0, 3).join('\n'));
    console.log('...\n');
    
    // –ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
    console.log('2. –ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤:');
    const exports = this.execCommand('ast-grep --pattern "export const $NAME" --lang tsx --lang ts src/');
    console.log(exports.split('\n').slice(0, 3).join('\n'));
    console.log('...\n');
    
    // –ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    console.log('3. –ü–æ–∏—Å–∫ TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤:');
    const interfaces = this.execCommand('ast-grep --pattern "interface $NAME { $$$ }" --lang tsx --lang ts src/');
    console.log(interfaces.split('\n').slice(0, 3).join('\n'));
    console.log('...\n');
  }

  /**
   * –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  demoCombined() {
    console.log('üîÑ === –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ï –ü–†–ò–ú–ï–†–´ ===\n');
    
    // –ù–∞–π—Ç–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏—Ö
    console.log('1. –ù–∞–π—Ç–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å:');
    const componentFiles = this.execCommand('fd --type f --glob "*component*" --extension tsx');
    const componentCount = componentFiles.split('\n').filter(line => line.trim()).length;
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${componentCount}`);
    console.log();
    
    // –ù–∞–π—Ç–∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
    console.log('2. –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤:');
    const imports = this.execCommand('rg "import.*from" --type tsx --type ts | head -10');
    console.log(imports);
    console.log();
    
    // –°–æ–∑–¥–∞—Ç—å JSON –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–µ–∫—Ç–µ
    console.log('3. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–µ–∫—Ç–µ:');
    const report = {
      timestamp: new Date().toISOString(),
      project: 'Claude Code UI',
      stats: {
        componentFiles: componentCount,
        totalFiles: this.execCommand('fd --type f | wc -l'),
        linesOfCode: this.execCommand('rg --type tsx --type ts --count . | tail -1')
      }
    };
    
    const reportFile = path.join(this.projectRoot, 'project-report.json');
    fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
    console.log(`–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportFile}`);
    console.log();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π
   */
  run() {
    console.log('üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–î–í–ò–ù–£–¢–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –†–ê–ó–†–ê–ë–û–¢–ö–ò\n');
    console.log('=' .repeat(60));
    console.log();
    
    this.demoFd();
    this.demoRg();
    this.demoJq();
    this.demoYq();
    this.demoAstGrep();
    this.demoCombined();
    
    console.log('‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã:');
    console.log('  fd --type f --extension tsx  # –ù–∞–π—Ç–∏ –≤—Å–µ TSX —Ñ–∞–π–ª—ã');
    console.log('  rg "TODO" --type tsx         # –ù–∞–π—Ç–∏ TODO –≤ TSX —Ñ–∞–π–ª–∞—Ö');
    console.log('  jq ".dependencies" package.json  # –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
    console.log('  ast-grep --pattern "const $NAME = () => { $$$ }" --lang tsx  # –ù–∞–π—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
if (require.main === module) {
  const demo = new DevToolsDemo();
  demo.run();
}

module.exports = DevToolsDemo;
