#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–∞ GitHub
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
 */

const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑
const analysisPath = path.join(__dirname, 'github-repo-analysis.json');
const analysis = JSON.parse(fs.readFileSync(analysisPath, 'utf8'));

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
 */
async function searchRepository(query) {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MCP GitHub —Å–µ—Ä–≤–µ—Ä–æ–º
  console.log(`üîç –ü–æ–∏—Å–∫: ${query}`);
  
  // –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  return {
    total_count: 1,
    items: [{
      name: query.split(' ')[0].replace(/"/g, ''),
      full_name: `example/${query.split(' ')[0].replace(/"/g, '')}`,
      html_url: `https://github.com/example/${query.split(' ')[0].replace(/"/g, '')}`,
      stargazers_count: Math.floor(Math.random() * 100),
      description: `${query.split(' ')[0].replace(/"/g, '')} component`,
      updated_at: new Date().toISOString(),
      topics: ['react', 'nextjs', 'ui', 'component']
    }]
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
 */
async function performSearch() {
  const results = [];
  
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è ${analysis.components.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...`);
  
  for (const component of analysis.components) {
    console.log(`\nüì¶ –ü–æ–∏—Å–∫ –¥–ª—è: ${component.componentName}`);
    
    const componentResults = {
      componentName: component.componentName,
      originalUrl: component.originalUrl,
      foundRepositories: []
    };
    
    // –ò—â–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É –Ω–∞–∑–≤–∞–Ω–∏—è
    for (const query of component.githubSearchQueries.slice(0, 3)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –∑–∞–ø—Ä–æ—Å–æ–≤
      try {
        const searchResult = await searchRepository(query.query);
        
        if (searchResult.total_count > 0) {
          searchResult.items.forEach(repo => {
            componentResults.foundRepositories.push({
              name: repo.name,
              fullName: repo.full_name,
              url: repo.html_url,
              stars: repo.stargazers_count,
              description: repo.description,
              lastUpdated: repo.updated_at,
              topics: repo.topics || []
            });
          });
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è ${query.name}: ${error.message}`);
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    componentResults.foundRepositories = componentResults.foundRepositories
      .filter((repo, index, self) => 
        index === self.findIndex(r => r.fullName === repo.fullName)
      )
      .sort((a, b) => b.stars - a.stars);
    
    results.push(componentResults);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${componentResults.foundRepositories.length} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤`);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const outputPath = path.join(__dirname, 'github-search-results.json');
  fs.writeFileSync(outputPath, JSON.stringify({
    metadata: {
      searchDate: new Date().toISOString(),
      totalComponents: results.length,
      totalRepositories: results.reduce((sum, r) => sum + r.foundRepositories.length, 0)
    },
    results
  }, null, 2));
  
  console.log(`\nüéâ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}`);
  
  // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
  createSummaryReport(results);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
 */
function createSummaryReport(results) {
  let report = `# GitHub Search Results Summary

## –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- **–î–∞—Ç–∞ –ø–æ–∏—Å–∫–∞**: ${new Date().toLocaleString('ru-RU')}
- **–í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤**: ${results.length}
- **–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤**: ${results.reduce((sum, r) => sum + r.foundRepositories.length, 0)}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º

`;

  results.forEach((result, index) => {
    report += `### ${index + 1}. ${result.componentName}
- **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞**: ${result.originalUrl}
- **–ù–∞–π–¥–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤**: ${result.foundRepositories.length}

`;

    if (result.foundRepositories.length > 0) {
      report += `#### –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:
`;
      
      result.foundRepositories.forEach((repo, repoIndex) => {
        report += `${repoIndex + 1}. **[ ${repo.name} ](${repo.url})** ‚≠ê ${repo.stars}
   - –û–ø–∏—Å–∞–Ω–∏–µ: ${repo.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
   - –û–±–Ω–æ–≤–ª–µ–Ω: ${new Date(repo.lastUpdated).toLocaleDateString('ru-RU')}
   - –¢–µ–≥–∏: ${repo.topics.join(', ') || '–ù–µ—Ç —Ç–µ–≥–æ–≤'}

`;
      });
    } else {
      report += `‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

`;
    }
    
    report += `---
`;
  });

  const reportPath = path.join(__dirname, 'github-search-summary.md');
  fs.writeFileSync(reportPath, report);
  
  console.log(`üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${reportPath}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
if (require.main === module) {
  performSearch().catch(console.error);
}

module.exports = { performSearch, searchRepository };
