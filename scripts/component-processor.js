
#!/usr/bin/env node

/**
 * Component Processor
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∏—Ö –≤ –ø—Ä–æ–µ–∫—Ç
 */

const fs = require('fs');
const path = require('path');

class ComponentProcessor {
  constructor() {
    this.baseDir = path.join(__dirname, '..', 'collected-components');
    this.outputDir = path.join(__dirname, '..', 'src', 'components', 'collected');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
   */
  async processAllComponents() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
    
    const categories = fs.readdirSync(this.baseDir)
      .filter(item => fs.statSync(path.join(this.baseDir, item)).isDirectory());
    
    for (const category of categories) {
      await this.processCategory(category);
    }
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  async processCategory(category) {
    console.log(`üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${category}`);
    
    const categoryDir = path.join(this.baseDir, category);
    const files = fs.readdirSync(categoryDir)
      .filter(file => file.endsWith('.tsx') || file.endsWith('.jsx'));
    
    for (const file of files) {
      await this.processComponent(category, file);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
   */
  async processComponent(category, filename) {
    const filePath = path.join(this.baseDir, category, filename);
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–¥ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    const adaptedContent = this.adaptComponent(content, category, filename);
    
    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    const outputCategoryDir = path.join(this.outputDir, category);
    if (!fs.existsSync(outputCategoryDir)) {
      fs.mkdirSync(outputCategoryDir, { recursive: true });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    const outputPath = path.join(outputCategoryDir, filename);
    fs.writeFileSync(outputPath, adaptedContent);
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${category}/${filename}`);
  }

  /**
   * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–¥ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
   */
  adaptComponent(content, category, filename) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const uiImports = `
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
`;

    // –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
    let adaptedContent = content
      .replace(/from ['"]\.\.?\//g, 'from "@/')
      .replace(/from ['"]\.\.?\//g, 'from "@/');

    // –î–æ–±–∞–≤–ª—è–µ–º TypeScript —Ç–∏–ø–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!adaptedContent.includes('interface') && !adaptedContent.includes('type')) {
      adaptedContent = adaptedContent.replace(
        /export const (\w+)/,
        `interface ${category.charAt(0).toUpperCase() + category.slice(1)}Props {
  // –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
}

export const $1`
      );
    }

    return adaptedContent;
  }
}

// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
if (require.main === module) {
  const processor = new ComponentProcessor();
  processor.processAllComponents().catch(console.error);
}

module.exports = ComponentProcessor;
